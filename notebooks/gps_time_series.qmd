---
title: "Beitbridge GPS Exploration"
format: html
editor: visual
---

```{r}

library(readr)
library(dplyr)
library(ggplot2)
library(skimr)
library(lubridate)
library(tidymodels)
library(tidyverse)
library(forecast)

library(tsibble)
library(fable)
library(feasts)
```

```{r}
border_data = read_csv("../data/processed/Beitbridge_Counts_Wait_Time_2018_2022.csv")
```

```{r}
border_data$datetime <- ymd_h(paste(border_data$StartDate, border_data$StartHour))
# Set datetime as the index column

```

## SA - Zimbabwe

```{r}
sa_zimbabwe = border_data %>% filter(Direction == "SA-Zimbabwe")
```

Convert to time series


```{r}
border_data_ts <- sa_zimbabwe %>% select(datetime, Median_Minutes, Count_Events) %>% 
  as_tsibble(index = datetime)
```

```{r}
daily_counts <- sa_zimbabwe%>%
  group_by(date=date(StartDate))%>%
  summarize(Daily_Counts = sum(Count_Events,na.rm=TRUE))%>%
  ungroup()%>%
  as_tsibble(index=date)
```

Creating moving averages for 5 days, 7 days and 14 days.

```{r}
daily_counts = daily_counts %>% mutate(ma_5 = ma(Daily_Counts, 5), ma_7=ma(Daily_Counts,7), ma_14 = ma(Daily_Counts, 14))
```

```{r}
daily_counts %>%
  filter(year(date)==2021)%>%
  ggplot()+
  geom_line(aes(x=date, y=Daily_Counts, col="Daily Counts"))+
  geom_line(aes(x=date, y=ma_14, col="14-ma"))+
  scale_colour_manual("Legend",values = c("14-ma" = "blue", "Daily Counts"="grey")) +
  labs(y = "Daily Counts", x = "Date")
  
```


```{r}
ggAcf(daily_counts)
```
```{r}
daily_median = sa_zimbabwe%>%
  mutate(weighted_median = Median_Minutes / Count_Events)%>%
  group_by(StartDate)%>%
  summarize(Total_Daily_Count = sum(Count_Events, na.rm=T),
            Daily_Median_Median = median(Median_Minutes, na.rm=T),
            Daily_Max_Median = max(Median_Minutes, na.rm=T),
            Daily_Weighted_Median = median(weighted_median, na.rm=T),
            Total_Weighted_Median = sum(weighted_median, na.rm=T))%>%
  as_tsibble(index = StartDate)
```

```{r}
autoplot(daily_median, Daily_Median_Median)
```

## Zimbabwe - SA

```{r}
zimbabwe_sa = border_data %>% filter(Direction == "Zimbabwe-SA")
```

```{r}
k=zimbabwe_sa%>%select(-StartDate, -StartHour, -Direction)%>%
  head(100)%>%
  dput()
#Copy it
clipr::write_clip(k)
```

This dataset represents border wait time data and contains five columns:

1.  Count_Events: The number of events that occurred during the hour.

2.  Median_Minutes: The median time it took to cross the border during the hour.

3.  Bottom_10\_\_Minutes: The shortest 10% of wait times during the hour.

4.  Top_10\_\_Minutes: The longest 10% of wait times during the hour.

5.  datetime: The hour in which the data was collected. Over 2018 - 2022.

\

Use quartiles and percentiles to estimate variability: We can use the bottom 10% and top 10% values to estimate the first and third quartiles, respectively. This can give us an estimate of the interquartile range (IQR) and help us assess the spread of the data

Where 1.645 is the approximate z-score for the 90% confidence interval.

```{r}


# Calculate the IQR for each hour
zimbabwe_sa$IQR <- (zimbabwe_sa$Top_10__Minutes - zimbabwe_sa$Bottom_10__Minutes) / 1.645

```

```{r}
zimbabwe_sa  = zimbabwe_sa %>% 
  rowwise()%>%
  mutate(
    Q1 = quantile(Bottom_10__Minutes, probs = 0.1, na.rm=T),
    Q3 = quantile(Top_10__Minutes, probs = 0.9, na.rm=T),
    IQR = Q3 - Q1,
    upper_bound = Q3 + 1.5 * IQR,
    lower_bound = pmax(Q1 - 1.5 * IQR, 0),
  )

```

# Daily

```{r}
#| warning: false
daily_summary <- zimbabwe_sa %>%
  group_by(date = date(datetime)) %>%
  summarize(
    median_minutes = median(Median_Minutes, na.rm = TRUE),
    mean_median_minutes = mean(Median_Minutes, na.rm = TRUE),
    max_median = max(Median_Minutes, na.rm=TRUE),
    min_median = min(Median_Minutes, na.rm = TRUE),
    q1 = quantile(Bottom_10__Minutes, probs = 0.1, na.rm = TRUE),
    q3 = quantile(Top_10__Minutes, probs = 0.9, na.rm = TRUE),
    iqr = q3 - q1,
    upper_bound = q3 + 1.5 * iqr,
    lower_bound = pmax(q1 - 1.5 * iqr, 0),
    count_events = sum(Count_Events, na.rm = TRUE),
    median_weight = median_minutes / count_events,
  )%>%
  mutate(
    day_of_week = weekdays(date),
    month = month(date, label = TRUE)
  )%>% mutate_if(is.character, factor)
```


